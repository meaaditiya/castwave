rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users: Can read public profiles, can only write to their own profile.
    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;

      // Subcollections for followers/following
      match /followers/{followerId} {
        allow read;
        allow create, delete: if request.auth.uid == followerId || request.auth.uid == userId;
      }
      match /following/{followingId} {
        allow read;
        allow create, delete: if request.auth.uid == userId;
      }
    }

    // ChatRooms: Rules for sessions
    match /chatRooms/{roomId} {
      // Read access: allow if public, or if the user is a participant in a private room
      allow read: if resource.data.isPrivate == false || exists(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid));
      // Update access: Liking, starting, ending a room.
      allow update: if request.auth.uid != null;
      // Create access: any authenticated user can create a room.
      allow create: if request.auth.uid != null;
      // Delete access: only the host can delete their own room.
      allow delete: if resource.data.hostId == request.auth.uid;

      // Participants subcollection
      match /participants/{participantId} {
        // Only the host can read the full list or update status
        allow read, write: if exists(/databases/$(database)/documents/chatRooms/$(roomId)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/chatRooms/$(roomId)).data.hostId == request.auth.uid;
        // Any authenticated user can create their own participant document (request to join)
        allow create: if request.auth.uid == participantId;
      }

      // Messages subcollection
      match /messages/{messageId} {
        // Any approved participant can read or write messages.
        allow read, write: if get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
      }

      // Polls subcollection
      match /polls/{pollId} {
         allow read: if get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
         // Only the host can create, update or delete polls
         allow write: if get(/databases/$(database)/documents/chatRooms/$(roomId)).data.hostId == request.auth.uid;
      }
    }
  }
}