
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthed() {
      return request.auth != null;
    }
    
    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }
    
    function isApprovedParticipant(chatRoomId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      return participantDoc.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // Allow any authenticated user to read the main details of a chat room.
      // This is necessary for listing public rooms and accessing private rooms via a link.
      allow get: if isAuthed();
      
      // Allow any authenticated user to create a new chat room.
      allow create: if isAuthed();

      // Allow listing of rooms only if querying for public rooms.
      // This supports the public sessions on the homepage.
      allow list: if isAuthed() && (request.query.where.isPrivate == false || request.query.where.hostId == request.auth.uid);
      
      // Allow the host to update or delete their own chat room.
      allow update, delete: if isAuthed() && isHost(chatRoomId);

      match /participants/{userId} {
        // Allow the host to read the full participant list.
        // Allow any authenticated user to read their own participant document.
        allow get: if isAuthed() && (isHost(chatRoomId) || request.auth.uid == userId);
        
        // Allow any authenticated user to see the list of participants.
        // This is crucial for the client to know if they are already in the list.
        allow list: if isAuthed();

        // Allow any user to add themselves as a 'pending' participant.
        // Allow the host to update any participant's status.
        allow create, update: if isAuthed();
        
        // Only the host can remove a participant.
        allow delete: if isAuthed() && isHost(chatRoomId);
      }

      match /messages/{messageId} {
        // Allow read only by the host or approved participants.
        allow read: if isAuthed() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // Allow write only by approved participants.
        allow create, update: if isAuthed() && isApprovedParticipant(chatRoomId);
        
        // Disallow deletion of messages.
        allow delete: if false;
      }
      
      match /polls/{pollId} {
        // Allow read by the host or approved participants.
        allow read: if isAuthed() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));

        // Allow poll creation and updates (like ending a poll) only by the host.
        allow create, update: if isAuthed() && isHost(chatRoomId);
        
        // Allow voting (which is an update to the poll document) by any approved participant.
        // This is a special case handled in the rule for update above.
        // For more granular control, you'd check specific fields.
        
        // Allow poll deletion only by the host.
        allow delete: if isAuthed() && isHost(chatRoomId);
      }
    }
  }
}
