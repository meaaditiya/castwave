rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    function isParticipant(chatRoomId) {
        return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
    }

    function isApprovedParticipant(chatRoomId) {
        return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';
    }
    
    match /chatRooms/{chatRoomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if isOwner(chatRoomId);

      match /participants/{userId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == userId; // Allow users to add themselves
        allow update: if isOwner(chatRoomId) || request.auth.uid == userId; // Host or user themselves can update (e.g., for requesting again)
        allow delete: if isOwner(chatRoomId);
      }
      
      match /messages/{messageId} {
        allow read: if isParticipant(chatRoomId);
        allow create: if isApprovedParticipant(chatRoomId);
        allow update: if isParticipant(chatRoomId); // for voting
        allow delete: if isOwner(chatRoomId);
      }

      match /polls/{pollId} {
        allow read: if isParticipant(chatRoomId);
        allow create: if isOwner(chatRoomId);
        allow update: if isOwner(chatRoomId) || isApprovedParticipant(chatRoomId); // Host can manage, approved can vote
        allow delete: if isOwner(chatRoomId);
      }
    }
  }
}
