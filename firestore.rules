
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isHost(chatRoomId) {
      return isAuth() && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    function isApprovedParticipant(chatRoomId) {
        let participant = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
        return isAuth() && participant.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // READ (Single Document): Allow reading a single public room, or a room the user hosts.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId);

      // READ (Query): Allow listing public rooms OR listing rooms the user hosts.
      allow list: if request.query.where.isPrivate == false || 
                     (isAuth() && request.query.where.hostId == request.auth.uid);
      
      // CREATE: Allow authenticated user to create a room, ensuring they are the host.
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;
      
      // UPDATE: Allow host to update room details. Any user can update the typing indicator.
      allow update: if isHost(chatRoomId)
                    || (isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['typingUsers']));

      // DELETE: Allow host to delete their own room. Sub-collection deletes are handled below.
      allow delete: if isHost(chatRoomId);

      // --- SUBCOLLECTIONS ---
      
      match /participants/{userId} {
        // READ: Host can read the full list. Users can read their own status.
        allow get: if isHost(chatRoomId) || isUser(userId);
        allow list: if isHost(chatRoomId);
        
        // CREATE: User can create their own participant document to request access.
        allow create: if isUser(userId);
        
        // UPDATE: Host can update any participant's status. User can update their own status (for re-requesting).
        allow update: if isHost(chatRoomId) || isUser(userId);
        
        // DELETE: Host can remove/delete a participant document.
        allow delete: if isHost(chatRoomId);
      }
      
      match /messages/{messageId} {
        // READ: Approved participants and the host can read messages.
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
        
        // CREATE: Approved participants and the host can create messages for themselves.
        allow create: if (isHost(chatRoomId) || isApprovedParticipant(chatRoomId))
                      && request.resource.data.userId == request.auth.uid;

        // UPDATE: Approved users can update a message once to vote.
        allow update: if (isHost(chatRoomId) || isApprovedParticipant(chatRoomId)) 
                      && resource.data.voters[request.auth.uid] == null;
        
        // DELETE: Host can delete messages.
        allow delete: if isHost(chatRoomId);
      }
      
      match /polls/{pollId} {
        // READ: Approved participants and the host can read polls.
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
        
        // CREATE: Only the host can create polls.
        allow create: if isHost(chatRoomId);
        
        // UPDATE: Host can update polls (e.g., end them). Approved users can update to vote.
        allow update: if isHost(chatRoomId) 
                      || (isApprovedParticipant(chatRoomId) && resource.data.voters[request.auth.uid] == null);

        // DELETE: Host can delete polls.
        allow delete: if isHost(chatRoomId);
      }
    }
  }
}

    