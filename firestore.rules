rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    function isApprovedParticipant(chatRoomId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)) &&
             participantDoc.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // READ:
      // - Allow reading any public room.
      // - Allow reading a private room if you are the host or an approved participant.
      // - Allow an authenticated user to read the main document of a private room (but not subcollections yet). This is crucial for the joining logic to work.
      allow get: if isAuth() && (!resource.data.isPrivate || resource.data.isPrivate && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId) || request.auth.uid != null));
      allow list: if isAuth() && !request.query.get("isPrivate"); // Only list public rooms on homepage
      
      // CREATE: Any authenticated user can create a room.
      allow create: if isAuth();
      
      // UPDATE: Only the host can update (e.g., feature message, end room).
      allow update: if isAuth() && isHost(chatRoomId);

      // DELETE: Only the host can delete.
      allow delete: if isAuth() && isHost(chatRoomId);

      // --- SUBCOLLECTIONS ---

      match /participants/{userId} {
        // READ: Only the host or an approved participant of that room can read the participants list.
        allow get, list: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // CREATE/UPDATE:
        // - Host can update any participant.
        // - A user can add themselves (for joining/requesting).
        // - A user can update their own status if they are making a request.
        allow write: if isAuth() && (isHost(chatRoomId) || request.auth.uid == userId);
      }

      match /messages/{messageId} {
        // READ: Only host or approved participants can read messages.
        allow get, list: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));

        // CREATE: Only approved participants can send messages.
        // UPDATE: Only host can feature, or a user can vote.
        allow create: if isAuth() && isApprovedParticipant(chatRoomId);
        allow update: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
      }

      match /polls/{pollId} {
        // READ: Only host or approved participants can read polls.
        allow get, list: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // WRITE:
        // - Host can create/end/update polls.
        // - Approved participants can vote.
        allow write: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
      }
    }
  }
}
