rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is the host of a given chat room
    function isHost(chatRoomId, userId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == userId;
    }
    
    // Helper function to check if a user is an approved participant
    function isApprovedParticipant(chatRoomId, userId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // READ:
      // - Anyone can read a public room.
      // - The host can read their own room.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId, request.auth.uid);
      
      // LIST (for homepage/my sessions):
      // - Allow listing public rooms.
      // - Allow a user to list rooms they host.
      allow list: if request.query.get('isPrivate') == false || request.query.get('hostId') == request.auth.uid;

      // CREATE:
      // - User must be authenticated.
      // - The user creating the room must be the host.
      allow create: if request.auth.uid != null && request.resource.data.hostId == request.auth.uid;
      
      // UPDATE:
      // - Only the host can update room details (isLive, scheduledAt, featuredMessage, etc).
      // - Any authenticated user can update the 'typingUsers' map.
      allow update: if (isHost(chatRoomId, request.auth.uid) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isLive', 'scheduledAt', 'featuredMessage', 'hostReply'])) || request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['typingUsers']);

      // DELETE:
      // - Only the host can delete their chat room.
      allow delete: if isHost(chatRoomId, request.auth.uid);

      // Subcollections
      
      match /participants/{participantId} {
        // READ: Anyone can read the participant list (for display).
        allow read: if true;
        
        // CREATE: 
        // A user can add themselves (request to join) or a host can add them.
        allow create: if request.auth.uid == participantId || isHost(chatRoomId, request.auth.uid);
        
        // UPDATE: Only the host can change a participant's status.
        allow update: if isHost(chatRoomId, request.auth.uid);
        
        // DELETE: Only the host can delete a participant document.
        allow delete: if isHost(chatRoomId, request.auth.uid);
      }
      
      match /messages/{messageId} {
        // READ: Only approved participants (or the host) can read messages.
        allow read: if isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId, request.auth.uid);
        
        // CREATE: Only approved participants (or the host) can send messages.
        allow create: if (isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId, request.auth.uid)) && request.resource.data.userId == request.auth.uid;
        
        // UPDATE (for voting):
        // An approved user can vote, but only on the 'upvotes', 'downvotes', and 'voters' fields.
        // Also checks they haven't voted before.
        allow update: if (isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId, request.auth.uid))
                      && resource.data.voters[request.auth.uid] == null
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'downvotes', 'voters']);
        
        // DELETE: Only the host can delete a message.
        allow delete: if isHost(chatRoomId, request.auth.uid);
      }
      
      match /polls/{pollId} {
        // READ: Any approved participant or the host can read poll data.
        allow read: if isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId, request.auth.uid);
        
        // CREATE: Only the host can create a poll.
        allow create: if isHost(chatRoomId, request.auth.uid);
        
        // UPDATE:
        // - Host can update to end the poll or toggle results.
        // - Approved participants can vote (update options and voters).
        allow update: if isHost(chatRoomId, request.auth.uid) || (isApprovedParticipant(chatRoomId, request.auth.uid) && resource.data.voters[request.auth.uid] == null);
        
        // DELETE: Only the host can delete a poll.
        allow delete: if isHost(chatRoomId, request.auth.uid);
      }
    }
  }
}