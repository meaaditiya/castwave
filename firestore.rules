rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
        return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }
    
    function isApprovedParticipant(chatRoomId) {
        return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // Create: Anyone authenticated can create a room. Host ID must match their own UID.
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;
      
      // Read:
      // - Allow reading public rooms.
      // - Allow reading a private room's main document (but not subcollections yet).
      allow get: if isAuth();
      allow list: if isAuth();

      // Update: Only the host can update room details (e.g., start/end session, feature message).
      allow update: if isAuth() && isHost(chatRoomId);

      // Delete: Only the host can delete their own room.
      allow delete: if isAuth() && isHost(chatRoomId);

      match /participants/{participantId} {
        // Create/Update: A user can add/update their own participant document, or the host can update any.
        allow write: if isAuth() && (request.auth.uid == participantId || isHost(chatRoomId));
        
        // Read: The host or an approved participant can read the list.
        allow read: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // Delete: The host can remove participants.
        allow delete: if isAuth() && isHost(chatRoomId);
      }

      match /messages/{messageId} {
        // Create: Approved participants can send messages.
        allow create: if isAuth() && isApprovedParticipant(chatRoomId);
        
        // Read: Host or approved participants can read messages.
        allow list, get: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // Update: Only for voting, by approved participants.
        allow update: if isAuth() && isApprovedParticipant(chatRoomId);

        // Delete: Only the host can delete messages.
        allow delete: if isAuth() && isHost(chatRoomId);
      }

      match /polls/{pollId} {
        // Create/Update/Delete: Only the host can manage polls.
        allow write: if isAuth() && isHost(chatRoomId);
        
        // Read: Host or approved participants can view polls.
        allow read: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));

         // Delete: Only the host can delete polls.
        allow delete: if isAuth() && isHost(chatRoomId);
      }
    }
  }
}