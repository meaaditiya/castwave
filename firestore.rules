rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return isAuth() && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    function isApprovedParticipant(chatRoomId) {
        let participant = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
        return isAuth() && participant.data.status == 'approved';
    }
    
    match /chatRooms/{chatRoomId} {
      // READ: Anyone can read a public chat room. Authenticated users can read rooms they host.
      allow read: if resource.data.isPrivate == false || isHost(chatRoomId);
      
      // CREATE: Any authenticated user can create a chat room.
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;
      
      // UPDATE: Only the host can update general room details. 
      // Typing indicator can be updated by any authenticated user (for security, this is limited to just that field).
      allow update: if isHost(chatRoomId)
                    || (isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['typingUsers']));

      // DELETE: Only the host can delete their own chat room.
      allow delete: if isHost(chatRoomId);
      
      // --- SUBCOLLECTIONS ---
      
      match /participants/{userId} {
        // READ: The host can read the full participant list.
        allow read: if isHost(chatRoomId);
        
        // CREATE: Any user can create their own participant document to request access.
        allow create: if isAuth() && request.auth.uid == userId;
        
        // UPDATE: The host can update any participant's status.
        // A user can update their own document to re-request access.
        allow update: if isHost(chatRoomId) || (isAuth() && request.auth.uid == userId);
        
        // DELETE: The host can remove a participant.
        allow delete: if isHost(chatRoomId);
      }
      
      match /messages/{messageId} {
        // READ: Approved participants and the host can read messages.
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
        
        // CREATE: Approved participants and the host can create messages.
        allow create: if (isHost(chatRoomId) || isApprovedParticipant(chatRoomId))
                      && request.resource.data.userId == request.auth.uid;

        // UPDATE: Only for voting logic. An approved participant can update a message once to vote.
        allow update: if (isHost(chatRoomId) || isApprovedParticipant(chatRoomId)) 
                      && resource.data.voters[request.auth.uid] == null; // Can only vote once
        
        // DELETE: Only the host can delete messages.
        allow delete: if isHost(chatRoomId);
      }
      
      match /polls/{pollId} {
        // READ: Approved participants and the host can read polls.
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
        
        // CREATE: Only the host can create polls.
        allow create: if isHost(chatRoomId);
        
        // UPDATE: The host can update polls (e.g., to end them).
        // Approved participants can update to vote, but only if they haven't voted yet.
        allow update: if isHost(chatRoomId) 
                      || (isApprovedParticipant(chatRoomId) && resource.data.voters[request.auth.uid] == null);
        
        // DELETE: Only the host can delete polls.
        allow delete: if isHost(chatRoomId);
      }
    }
  }
}
