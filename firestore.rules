rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is the host of a chat room
    function isHost(chatRoomId, userId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == userId;
    }

    // Helper function to check if a user is an approved participant
    function isApprovedParticipant(chatRoomId, userId) {
      let participant = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data;
      return participant.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.hostId == request.auth.uid;
      allow update: if request.auth != null && isHost(chatRoomId, request.auth.uid);
      allow delete: if request.auth != null && isHost(chatRoomId, request.auth.uid);

      match /participants/{userId} {
        allow read: if request.auth != null;
        
        // Allow hosts to manage any participant
        allow write: if request.auth != null && isHost(chatRoomId, request.auth.uid);

        // Allow users to create or update their own participant document
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /messages/{messageId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && (isHost(chatRoomId, request.auth.uid) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow update: if request.auth != null && (isHost(chatRoomId, request.auth.uid) || request.auth.uid == resource.data.userId); // Allow host or message owner to update (e.g., for voting)
        allow delete: if request.auth != null && isHost(chatRoomId, request.auth.uid);
      }
    }
  }
}