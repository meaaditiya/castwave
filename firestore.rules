
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    function isParticipant(chatRoomId, userId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
    }

    function isApprovedParticipant(chatRoomId, userId) {
        return isParticipant(chatRoomId, userId) &&
               get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // Allow read access to the main chat room document for the host or any approved participant.
      // Any authenticated user can read if the room is not private.
      allow read: if isUserAuthenticated() &&
                      (!resource.data.isPrivate || isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));

      // Allow creating a room if the user is authenticated.
      allow create: if isUserAuthenticated();

      // Allow updates only by the host.
      allow update: if isUserAuthenticated() && isHost(chatRoomId);

      // Allow deletion only by the host.
      allow delete: if isUserAuthenticated() && isHost(chatRoomId);

      // --- Subcollections ---
      
      match /participants/{userId} {
        // A user can read their own participant status. The host can read any participant's status.
        allow get: if isUserAuthenticated() && (request.auth.uid == userId || isHost(chatRoomId));

        // Any authenticated user can list participants to check if they need to join. This is required for the join-request flow.
        allow list: if isUserAuthenticated();
        
        // A user can add themselves to the participants list.
        allow create: if isUserAuthenticated() && request.auth.uid == userId;

        // Only the host can update a participant's status (approve, deny, remove).
        // A user can also update their own to request to join again.
        allow update: if isUserAuthenticated() && (isHost(chatRoomId) || request.auth.uid == userId);
        
        // Only the host can delete participants.
        allow delete: if isUserAuthenticated() && isHost(chatRoomId);
      }

      match /messages/{messageId} {
        // Read messages if the user is the host or an approved participant.
        allow read: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));

        // Create/update messages if the user is the host or an approved participant.
        allow write: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        
        // Only host can delete messages.
        allow delete: if isUserAuthenticated() && isHost(chatRoomId);
      }

      match /polls/{pollId} {
        // Read polls if the user is the host or an approved participant.
        allow read: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        
        // Write (create, update) polls if the user is the host or an approved participant (for voting).
        allow write: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));

        // Only host can delete polls.
        allow delete: if isUserAuthenticated() && isHost(chatRoomId);
      }
    }
  }
}
