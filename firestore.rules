rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    function isApprovedParticipant(chatRoomId, userId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // 1. Anyone logged in can create a room.
      // 2. The host can update or delete their own room.
      // 3. Any authenticated user can read a public room.
      // 4. Any authenticated user can read a private room's top-level doc (for joining).
      allow read: if isUserAuthenticated() && (resource.data.isPrivate == false || isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
      allow create: if isUserAuthenticated();
      allow update, delete: if isUserAuthenticated() && isHost(chatRoomId);

      match /participants/{userId} {
        // 1. The host can do anything with participants.
        // 2. Any authenticated user can create their own participant document (to request access).
        // 3. Any authenticated user can read the full participant list (to see who is in the room).
        allow read: if isUserAuthenticated();
        allow create: if isUserAuthenticated() && request.auth.uid == userId;
        allow update, delete: if isUserAuthenticated() && isHost(chatRoomId);
      }
      
      match /messages/{messageId} {
        // 1. Host and approved participants can read messages.
        // 2. Host and approved participants can write messages.
        // 3. Host can delete any message.
        allow read: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow create, update: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow delete: if isUserAuthenticated() && isHost(chatRoomId);
      }

      match /polls/{pollId} {
        // 1. Host and approved participants can read polls.
        // 2. Host can create/update/delete polls.
        // 3. Approved participants can update polls (to vote).
        allow read: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow create, delete: if isUserAuthenticated() && isHost(chatRoomId);
        allow update: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
      }
    }
  }
}
