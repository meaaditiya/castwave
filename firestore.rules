
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isHost(roomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(roomId)).data.hostId;
    }

    function isApprovedParticipant(roomId) {
      return exists(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
    }
    
    match /chatRooms/{roomId} {
      // Allow any authenticated user to create a room.
      allow create: if request.auth != null;

      // Allow any authenticated user to read a public room or the main doc of a private room.
      allow get: if request.auth != null;

      // Allow authenticated users to list rooms for the homepage.
      allow list: if request.auth != null;

      // Only the host can update or delete their own room.
      allow update, delete: if request.auth != null && isHost(roomId);
      
      match /participants/{userId} {
        // Any authenticated user can be added to the participants list.
        allow create: if request.auth != null;

        // Any authenticated user can read the participant list (needed to check status).
        allow list, get: if request.auth != null;
        
        // Only the host can update a participant's status (approve, deny, remove).
        // A user can update their own request count.
        allow update: if request.auth != null && (isHost(roomId) || request.auth.uid == userId);
      }
      
      match /messages/{messageId} {
        // Allow creating messages if the user is an approved participant.
        allow create: if request.auth != null && isApprovedParticipant(roomId);

        // Allow reading messages if the room is public, or if the user is an approved participant of a private room.
        allow list, get: if request.auth != null && (get(/databases/$(database)/documents/chatRooms/$(roomId)).data.isPrivate == false || isApprovedParticipant(roomId));

        // Allow updating (for votes) if the user is an approved participant.
        allow update: if request.auth != null && isApprovedParticipant(roomId);
      }

      match /polls/{pollId} {
        // Only the host can create, update, or delete a poll.
        allow create, update, delete: if request.auth != null && isHost(roomId);
        
        // Allow reading polls if the room is public, or if the user is an approved participant of a private room.
        allow list, get: if request.auth != null && (get(/databases/$(database)/documents/chatRooms/$(roomId)).data.isPrivate == false || isApprovedParticipant(roomId));
      }
    }
  }
}
