
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to reuse logic
    function isHost(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    function isApprovedParticipant(chatRoomId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';
    }

    // Rules for the main chat room documents
    match /chatRooms/{chatRoomId} {
      // READ:
      // - Allow reading any public room.
      // - Allow reading a private room (needed for the client to process joining).
      // - Allow any user to list rooms for the homepage query to work.
      allow get: if request.auth != null && (
                   resource.data.isPrivate == false ||
                   resource.data.isPrivate == true
                 );
      allow list: if request.auth != null;

      // CREATE: Any authenticated user can create a room. The hostId must match their own UID.
      allow create: if request.auth != null && request.resource.data.hostId == request.auth.uid;

      // UPDATE: Only the host can update room details (e.g., end session, feature message).
      allow update: if request.auth != null && isHost(chatRoomId);

      // DELETE: Only the host can delete a room.
      allow delete: if request.auth != null && isHost(chatRoomId);

      // --- SUBCOLLECTIONS ---

      // Rules for participants
      match /participants/{userId} {
        // READ:
        // - Anyone can see participants of a public room.
        // - Host and approved participants can see participants of a private room.
        // - Any authenticated user can list participants of a private room to check their own status.
        allow get: if request.auth != null && (
                     get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false ||
                     (get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == true && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId)))
                   );
        allow list: if request.auth != null;

        // CREATE/UPDATE:
        // - Host can add/update any participant.
        // - A user can add themselves with 'pending' status or be added by the app.
        allow write: if request.auth != null && (
                      isHost(chatRoomId) ||
                      request.auth.uid == userId
                    );
      }

      // Rules for messages
      match /messages/{messageId} {
        // READ:
        // - Anyone can read messages in a public room.
        // - Only approved participants (or the host) can read messages in a private room.
        allow get, list: if request.auth != null && (
                            get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false ||
                            isHost(chatRoomId) ||
                            isApprovedParticipant(chatRoomId)
                          );

        // CREATE: Only approved participants can send messages.
        // UPDATE: Only approved participants can vote on messages.
        allow create, update: if request.auth != null && isApprovedParticipant(chatRoomId);
      }

      // Rules for polls
      match /polls/{pollId} {
        // READ:
        // - Anyone can read polls in a public room.
        // - Only approved participants (or the host) can read polls in a private room.
        allow get, list: if request.auth != null && (
                            get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false ||
                            isHost(chatRoomId) ||
                            isApprovedParticipant(chatRoomId)
                          );

        // WRITE: Only the host can create/update polls.
        // Voting (update) is handled within the pollService logic, but the user must be approved.
        allow create, update, delete: if request.auth != null && isHost(chatRoomId);
      }
    }
  }
}
