
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is an approved participant or host
    function isApprovedOrHost(chatRoomId) {
      let isHost = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      let isApprovedParticipant = participantDoc.data.status == 'approved';
      return isHost || isApprovedParticipant;
    }

    match /chatRooms/{chatRoomId} {
      // LIST: Allow querying for public rooms or rooms the user hosts.
      allow list: if (request.query.get('isPrivate') == false) || 
                     (request.query.get('hostId') == request.auth.uid && request.auth != null);
      
      // GET: Allow reading a room if it's public, or if the user is the host.
      allow get: if resource.data.isPrivate == false || resource.data.hostId == request.auth.uid;

      // CREATE: Any authenticated user can create a chat room.
      allow create: if request.auth != null;

      // UPDATE: Only the host can update a room (e.g., start/end session, feature message).
      allow update: if request.auth.uid == resource.data.hostId;
      
      // DELETE: Only the host can delete their own chat room.
      allow delete: if request.auth.uid == resource.data.hostId;

      match /messages/{messageId} {
        // READ: Approved participants and the host can read messages.
        allow read: if isApprovedOrHost(chatRoomId);
        // CREATE/UPDATE: Approved participants and the host can create/vote on messages.
        allow create, update: if isApprovedOrHost(chatRoomId);
        allow delete: if false; // Nobody can delete messages for now.
      }

      match /polls/{pollId} {
        // READ: Approved participants and the host can read polls.
        allow read: if isApprovedOrHost(chatRoomId);
        // CREATE/UPDATE: Only the host can create or update polls.
        allow create, update: if get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
        allow delete: if false; // Nobody can delete polls.
      }

      match /participants/{participantId} {
        // LIST: Any authenticated user can list participants to check status/request access.
        allow list: if request.auth != null;
        // GET: A user can get their own participant document, or the host can get any.
        allow get: if request.auth.uid == participantId || get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
        // CREATE: A user can add themselves to the participants list to request access.
        allow create: if request.auth.uid == participantId;
        // UPDATE: The host can update any participant's status. A user can update their own to request again.
        allow update: if (get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid) || 
                         (request.auth.uid == participantId);
        allow delete: if false; // Nobody can delete participants directly.
      }
    }
  }
}
