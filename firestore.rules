rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own profile, but only read others' public profiles.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Allow authenticated users to manage their own follow lists
      match /following/{targetId} {
        allow read, create, delete: if request.auth.uid == userId;
      }
      match /followers/{followerId} {
        allow read: if request.auth != null;
        // Followers can only be created/deleted by the corresponding user action
        allow write: if request.auth.uid == followerId;
      }
    }

    // Chat Rooms
    match /chatRooms/{roomId} {
      // Anyone authenticated can read a public chat room.
      // Private rooms can only be read by participants.
      allow read: if request.auth != null && (resource.data.isPrivate == false || exists(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)));
      
      // Allow authenticated users to create rooms.
      allow create: if request.auth != null;
      
      // Allow host to update/delete. Allow authenticated users to like/dislike.
      allow update: if request.auth != null && (request.auth.uid == resource.data.hostId || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'dislikes', 'likers', 'dislikers']));
      allow delete: if request.auth != null && request.auth.uid == resource.data.hostId;

      // Messages subcollection
      match /messages/{messageId} {
        // Only approved participants can read/write messages.
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
        // Allow voting by approved participants
        allow update: if request.auth != null && get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
      }

      // Participants subcollection
      match /participants/{participantId} {
        // User can create their own participant document (join request)
        // Host can read/update any participant.
        // User can read their own participant document.
        allow create: if request.auth.uid == participantId;
        allow read, update: if request.auth != null && (request.auth.uid == resource.data.hostId || request.auth.uid == participantId);
      }
      
      // Polls subcollection
      match /polls/{pollId} {
      	// Host can create/update polls.
        // Approved participants can read/vote on polls.
      	allow read, write: if request.auth != null && (get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved' || request.auth.uid == resource.data.hostId);
      }
      
      // WebRTC Signals (if you add WebRTC)
      match /webrtc_signals/{signalId} {
        allow read, write: if request.auth != null && exists(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid));
      }
    }
  }
}