
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }
    
    function isApprovedParticipant(chatRoomId, userId) {
      let participant = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data;
      return participant.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      allow create: if isUserAuthenticated();
      
      // Public rooms can be read by anyone. Private rooms by host or approved participants.
      allow get: if resource.data.isPrivate == false || (isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid)));

      // Allow anyone to LIST rooms for the homepage query. We filter private rooms client-side.
      allow list: if isUserAuthenticated();
      
      allow update: if isUserAuthenticated() && isHost(chatRoomId);
      allow delete: if isUserAuthenticated() && isHost(chatRoomId);

      match /participants/{userId} {
        allow create: if isUserAuthenticated() && request.auth.uid == userId;
        allow get: if isUserAuthenticated() && (request.auth.uid == userId || isHost(chatRoomId));
        allow list: if isUserAuthenticated(); // Allow listing to check for pending status
        allow update: if isUserAuthenticated() && (isHost(chatRoomId) || request.auth.uid == userId);
        allow delete: if isUserAuthenticated() && isHost(chatRoomId);
      }

      match /messages/{messageId} {
        allow read, write: if isUserAuthenticated() && isApprovedParticipant(chatRoomId, request.auth.uid);
        allow update: if isUserAuthenticated() && isApprovedParticipant(chatRoomId, request.auth.uid); // For voting
      }
      
      match /polls/{pollId} {
        allow read: if isUserAuthenticated() && isApprovedParticipant(chatRoomId, request.auth.uid);
        allow create: if isUserAuthenticated() && isHost(chatRoomId);
        // Allow approved users to vote (update)
        allow update: if isUserAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow delete: if isUserAuthenticated() && isHost(chatRoomId);
      }
    }
  }
}
