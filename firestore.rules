rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isHost(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    function isApprovedParticipant(chatRoomId, userId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
             get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // Anyone can read a chatroom's main document to see its details.
      // Rules for subcollections will determine who can see messages, participants, etc.
      allow read: if request.auth != null;

      // Only the host can update the chat room details or delete it.
      allow update, delete: if isHost(chatRoomId);

      // Any authenticated user can create a chat room.
      allow create: if request.auth != null;

      match /participants/{userId} {
        // Any authenticated user can see the list of participants (but not necessarily their status).
        // This is required for a new user to check if they are already on the list before requesting to join.
        allow list: if request.auth != null;

        // A user can read their own participant document.
        // The host can read any participant's document.
        allow get: if request.auth != null && (request.auth.uid == userId || isHost(chatRoomId));
        
        // A user can create their own participant document (i.e., request to join).
        allow create: if request.auth.uid == userId;

        // Only the host can update a participant's status (approve, deny, remove).
        allow update: if isHost(chatRoomId);
      }

      match /messages/{messageId} {
        // Only approved participants or the host can read messages.
        allow read: if request.auth != null && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));

        // Only approved participants can send messages.
        allow create: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid);

        // Only the host or the message author can update a message (e.g., for voting).
        allow update: if request.auth != null && (isHost(chatRoomId) || request.resource.data.userId == request.auth.uid);
      }

      match /polls/{pollId} {
        // Allow reading polls if the user is the host or an approved participant.
        allow read: if request.auth != null && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        
        // Only the host can create polls.
        allow create: if isHost(chatRoomId);
        
        // Only approved participants can vote (update the poll).
        // The host can also update (e.g., to end the poll or toggle visibility).
        allow update: if request.auth != null && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
      }
    }
  }
}
