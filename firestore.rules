rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to reduce duplication
    function isAuth() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    function isApprovedParticipant(chatRoomId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid))
        && participantDoc.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // READ:
      // - Allow read if the room is public.
      // - Allow read if the room is private (allows client to check room status before attempting to join).
      // - Allow read if the user is an approved participant or the host.
      allow get: if isAuth() && (resource.data.isPrivate == false || resource.data.isPrivate == true || isApprovedParticipant(chatRoomId) || isHost(chatRoomId));
      allow list: if isAuth() && request.query.where.size() == 0; // Allow fetching all public rooms on the homepage
      
      // CREATE: Any authenticated user can create a room.
      allow create: if isAuth();

      // UPDATE: Only the host can update room details (e.g., start/end session, feature message).
      allow update: if isAuth() && isHost(chatRoomId);

      // DELETE: Only the host can delete the room.
      allow delete: if isAuth() && isHost(chatRoomId);

      // --- SUBCOLLECTIONS ---

      match /participants/{userId} {
        // READ: 
        // - Allow host to read all participants.
        // - Allow any authenticated user to read the list to check status (needed for joining private rooms).
        // - Allow approved participants to see other participants.
        allow get, list: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId) || get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == true || get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false);

        // CREATE:
        // - A user can create their own participant document (to join or request access).
        // - The host can add other participants.
        allow create: if isAuth() && (request.auth.uid == userId || isHost(chatRoomId));

        // UPDATE:
        // - Only the host can change a participant's status (approve/deny/remove).
        // - A user can update their own document to re-request access.
        allow update: if isAuth() && (isHost(chatRoomId) || request.auth.uid == userId);
      }

      match /messages/{messageId} {
        // READ:
        // - Allow read if the room is public.
        // - Allow read if the user is an approved participant or the host.
        allow get, list: if isAuth() && (get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false || isApprovedParticipant(chatRoomId) || isHost(chatRoomId));
        
        // CREATE/UPDATE:
        // - Only approved participants and the host can send messages or vote.
        allow create, update: if isAuth() && (isApprovedParticipant(chatRoomId) || isHost(chatRoomId));
      }

      match /polls/{pollId} {
        // READ:
        // - Allow read if the room is public.
        // - Allow read if user is an approved participant or host.
        allow get, list: if isAuth() && (get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false || isApprovedParticipant(chatRoomId) || isHost(chatRoomId));
        
        // WRITE (create, update, delete):
        // - Only the host can create, end, or manage polls.
        // - Approved participants can vote (update), but this is handled via a transaction rule in the service.
        allow write: if isAuth() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
      }
    }
  }
}