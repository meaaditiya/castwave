rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isRoomHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    function isApprovedParticipant(chatRoomId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid))
             && participantDoc.data.status == 'approved';
    }
    
    function isRoomPublic(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false;
    }

    match /chatRooms/{chatRoomId} {
      // Anyone can read a room's top-level info if it's public.
      // Anyone can read a room's top-level info if it's private (to allow joining).
      allow get: if isUserAuthenticated();
      
      // Allow authenticated users to see the list of public chat rooms on the homepage.
      allow list: if isUserAuthenticated();

      // Only authenticated users can create a chat room.
      allow create: if isUserAuthenticated();
      
      // Only the host can update or delete their own chat room.
      allow update, delete: if isUserAuthenticated() && isRoomHost(chatRoomId);

      match /participants/{userId} {
        // The host can read, create, update, and delete any participant record.
        allow read, write: if isUserAuthenticated() && isRoomHost(chatRoomId);
        
        // Any authenticated user can create their own participant document when they join.
        // They can also read their own status.
        allow create, get: if isUserAuthenticated() && request.auth.uid == userId;

        // Any authenticated user can see the full list of participants.
        allow list: if isUserAuthenticated();
      }

      match /messages/{messageId} {
        // The host can read all messages. Approved participants can read all messages.
        allow read: if isUserAuthenticated() && (isRoomHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // Only approved participants can create messages.
        allow create: if isUserAuthenticated() && isApprovedParticipant(chatRoomId);
        
        // Only the host or the user who created the message can update it (e.g., for voting).
        allow update: if isUserAuthenticated() && (isRoomHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // Only the host can delete messages.
        allow delete: if isUserAuthenticated() && isRoomHost(chatRoomId);
      }

      match /polls/{pollId} {
        // The host can read all polls. Approved participants can read all polls.
        allow read: if isUserAuthenticated() && (isRoomHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // Only the host can create or delete polls.
        allow create, delete: if isUserAuthenticated() && isRoomHost(chatRoomId);

        // Host can update polls (e.g., end them). Participants can update to vote.
        allow update: if isUserAuthenticated() && (isRoomHost(chatRoomId) || isApprovedParticipant(chatRoomId));
      }
    }
  }
}
