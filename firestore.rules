rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    function isApprovedOrHost(chatRoomId, userId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
      return isHost(chatRoomId) || (exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
             (participantDoc.data.status == 'approved'));
    }

    match /users/{userId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followerCount']));

      match /following/{targetUserId} {
        allow read: if request.auth != null;
        allow create, delete: if isOwner(userId);
      }
      match /followers/{followerId} {
        allow read: if request.auth != null;
        allow create, delete: if isOwner(followerId);
      }
    }

    match /chatRooms/{chatRoomId} {
      allow list: if request.auth != null;
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.hostId == request.auth.uid;
      allow update: if request.auth != null && (isHost(chatRoomId) || request.resource.data.diff(request.resource.data).affectedKeys().hasOnly(['likes', 'dislikes', 'likers', 'dislikers']));
      allow delete: if request.auth != null && isHost(chatRoomId);

      match /participants/{userId} {
        allow get, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow update: if request.auth != null && (isHost(chatRoomId) || request.auth.uid == userId);
        allow delete: if request.auth != null && isHost(chatRoomId);
      }

      match /messages/{messageId} {
        allow get, list: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
        allow create: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid) && request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
        allow delete: if request.auth != null && isHost(chatRoomId);
      }

      match /polls/{pollId} {
        allow get, list: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
        allow create, delete: if request.auth != null && isHost(chatRoomId);
        allow update: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
      }
      
      // -- RTC Signaling Rules --
      match /rtc/{userId} {

        // Allow approved users to manage their own signaling documents
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;

        // Allow other approved users to write to this user's signaling collections
        match /signals/{peerId} {
          allow write: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
          allow read: if request.auth != null && request.auth.uid == userId;
        }

        match /candidates/{peerId} {
           allow list: if request.auth != null && request.auth.uid == userId;
           match /ice/{candidateId} {
             allow read: if request.auth != null && request.auth.uid == userId;
             allow write: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
           }
        }
        
        match /hangup/{peerId} {
            allow read: if request.auth != null && request.auth.uid == userId;
            allow write: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
        }
      }
    }
  }
}
