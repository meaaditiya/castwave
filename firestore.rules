
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isHost(chatRoomId) {
      return isUser(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId);
    }

    function isApproved(chatRoomId) {
      let status = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status;
      return status == 'approved';
    }

    function isHostOrApproved(chatRoomId) {
      return isHost(chatRoomId) || isApproved(chatRoomId);
    }
    
    // --- Main Rules ---
    match /chatRooms/{chatRoomId} {
    
      // READ: 
      // - Get: Anyone can get a public room. Host can get their own room.
      // - List: Anyone can query public rooms. Hosts can query their own rooms.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId);
      allow list: if request.query.where.isPrivate == false || (isAuth() && request.query.where.hostId == request.auth.uid);

      // CREATE: Any authenticated user can create a room, but they must be the host.
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;
      
      // UPDATE: Only the host can update room details. Any user can update the 'typingUsers' field.
      allow update: if isHost(chatRoomId) || (isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['typingUsers']));

      // DELETE: Only the host can delete their room.
      allow delete: if isHost(chatRoomId);

      // --- Subcollections ---
      match /participants/{userId} {
        allow read: if isHost(chatRoomId) || isUser(userId);
        allow create: if isUser(userId);
        allow update: if isHost(chatRoomId) || isUser(userId);
        allow delete: if isHost(chatRoomId) || isUser(userId);
      }

      match /messages/{messageId} {
        allow read: if isHostOrApproved(chatRoomId);
        allow create: if isHostOrApproved(chatRoomId) && isUser(request.resource.data.userId);
        allow update: if isHostOrApproved(chatRoomId) && resource.data.voters[request.auth.uid] == null; // Vote once
        allow delete: if isHost(chatRoomId);
      }

      match /polls/{pollId} {
        allow read, list: if isHostOrApproved(chatRoomId);
        allow create, delete: if isHost(chatRoomId);
        allow update: if isHost(chatRoomId) || (isApproved(chatRoomId) && resource.data.voters[request.auth.uid] == null);
      }
    }
  }
}
