rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return request.auth.uid == resource.data.hostId;
    }

    match /chatRooms/{chatRoomId} {
      // Anyone authenticated can read chat rooms
      allow read: if isSignedIn();
      
      // Only authenticated users can create a chat room
      allow create: if isSignedIn();
      
      // Only the host can update or delete their own chat room
      allow update, delete: if isSignedIn() && isOwner(resource);

      // Rules for subcollections
      match /participants/{participantId} {
        // Anyone authenticated can read the participants list.
        // This is necessary to check status (pending, approved, etc.)
        allow read: if isSignedIn();

        // An authenticated user can add themselves to the participants list.
        // They can also update their own status (e.g. re-requesting).
        allow create, update: if isSignedIn() && request.auth.uid == participantId;
        
        // Only the host can update other participants (approve, deny, remove).
        // This is covered by a more specific rule below.
        allow update: if isSignedIn() && isOwner(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)));
      }

      match /messages/{messageId} {
        // Anyone can read messages
        allow read: if isSignedIn();
        
        // A user can send a message only if they are an approved participant.
        allow create: if isSignedIn() && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';

        // A user can vote on a message (update) if they are an approved participant.
        allow update: if isSignedIn() && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';
      }
    }
  }
}
