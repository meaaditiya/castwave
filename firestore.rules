
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    match /chatRooms/{chatRoomId} {
      // LIST: Rules for querying the collection
      // Allow fetching public rooms OR rooms created by the current user.
      allow list: if (request.query.where.isPrivate == false) || (isAuth() && request.query.where.hostId == request.auth.uid);

      // GET: Rules for reading a single document
      // Allow reading a public room, or if the user is the host of a private room.
      allow get: if resource.data.isPrivate == false || (isAuth() && resource.data.hostId == request.auth.uid);

      // CREATE: Only authenticated users can create rooms.
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;

      // UPDATE: Only the host can update room details like isLive, featuredMessage, etc.
      allow update: if isAuth() && resource.data.hostId == request.auth.uid;

      // DELETE: Only the host can delete a room.
      allow delete: if isAuth() && resource.data.hostId == request.auth.uid;

      // Sub-collections
      match /participants/{participantId} {
        // Anyone can read the participant list (needed to see who is in the room).
        allow list, get: if isAuth();
        
        // A user can add themselves (or be added by the host).
        allow create: if isAuth() && (isUser(participantId) || isUser(resource.data.hostId));

        // Only the host can change a participant's status (approve, deny, make speaker).
        allow update: if isAuth() && isUser(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId);
      }

      match /messages/{messageId} {
         // Users must be approved participants to view messages.
        allow list, get: if isAuth() && exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)) && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status in ['approved', 'speaker'];

        // Allow approved participants to create messages (send chat) and vote (update).
        allow create, update: if isAuth() && exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)) && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status in ['approved', 'speaker'];
      }
      
      match /polls/{pollId} {
        // Anyone in the room can read polls.
        allow list, get: if isAuth() && exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
        
        // Only the host can create/update polls.
        allow create, update: if isAuth() && isUser(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId);
      }
      
      match /webrtc_signals/{signalId} {
          // Any authenticated user can create signals (offers/answers) and delete them.
          allow write: if isAuth();
          allow get, list: if isAuth();
      }
    }
  }
}
