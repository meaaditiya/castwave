rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an approved participant of a room
    function isApprovedParticipant(roomId) {
      return exists(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
    }

    // Helper function to check if a user is the host of a room
    function isHost(roomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(roomId)).data.hostId;
    }

    match /chatRooms/{roomId} {
      // Allow any authenticated user to list public rooms for the homepage.
      // Private rooms are filtered on the client-side.
      allow list: if request.auth != null;

      // Allow any authenticated user to read the main document of any room.
      // This is necessary to load the room details, even for private rooms when joining via a link.
      allow get: if request.auth != null;

      // Allow authenticated users to create a room.
      allow create: if request.auth != null;

      // Only the host can update or delete their own room.
      allow update: if request.auth != null && isHost(roomId);
      allow delete: if request.auth != null && isHost(roomId);

      match /participants/{userId} {
        // Any authenticated user can read the participants list (to see who is in the room).
        // The host needs this to see pending requests.
        allow read: if request.auth != null;

        // An authenticated user can add themselves to the list (request to join).
        // The host can update any participant's status.
        allow write: if request.auth != null && (request.auth.uid == userId || isHost(roomId));
      }

      match /messages/{messageId} {
        // Only approved participants can read messages.
        allow read: if request.auth != null && isApprovedParticipant(roomId);

        // Only approved participants can create (send) messages.
        allow create: if request.auth != null && isApprovedParticipant(roomId);

        // Only approved participants can vote (update) on messages.
        allow update: if request.auth != null && isApprovedParticipant(roomId);
      }

      match /polls/{pollId} {
        // Only approved participants can read polls.
        allow read: if request.auth != null && isApprovedParticipant(roomId);

        // Only the host can create, update (end poll, toggle visibility), or delete polls.
        allow create, delete: if request.auth != null && isHost(roomId);
        
        // Allow host to update. For voting, check is done in the transaction.
        // Allow approved participants to vote (update).
        allow update: if request.auth != null && (isHost(roomId) || isApprovedParticipant(roomId));
      }
    }
  }
}
