
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getChatRoom(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId));
    }

    function isHost(chatRoomId) {
        let chatRoom = getChatRoom(chatRoomId);
        return isUser(chatRoom.data.hostId);
    }

    function isParticipant(chatRoomId, userId) {
        return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
    }

    function isApprovedParticipant(chatRoomId, userId) {
        let participant = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
        return isParticipant(chatRoomId, userId) && participant.data.status == 'approved';
    }
    
    // ChatRoom collection rules
    match /chatRooms/{chatRoomId} {
      // READ: 
      // - Anyone can read a public room.
      // - The host can read their own room, public or private.
      // - An approved participant can read the room.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid);
      
      // LIST:
      // - Any authenticated user can query for their own sessions.
      // - Any authenticated user can query for public sessions.
      allow list: if (isAuth() && request.query.get('hostId') == request.auth.uid) || (isAuth() && request.query.get('isPrivate') == false);

      // CREATE: Any authenticated user can create a chat room.
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;
      
      // UPDATE: Only the host can update the chat room (e.g., start/end, feature message).
      allow update: if isHost(chatRoomId);
      
      // DELETE: Only the host can delete the chat room.
      allow delete: if isHost(chatRoomId);

        // Sub-collections rules
        match /participants/{userId} {
            // LIST: Host can list all participants. A user needs to be able to check the list to see if they should request to join.
            allow list: if isAuth();

            // GET: A user can get their own participant document, or the host can get any.
            allow get: if isUser(userId) || isHost(chatRoomId);

            // CREATE: A user can add themselves to the participants list (request to join).
            allow create: if isUser(userId);

            // UPDATE: A user can update their own status (e.g. re-requesting). The host can update any user's status.
            allow update: if isUser(userId) || isHost(chatRoomId);
            
            // DELETE: Host can remove a participant.
            allow delete: if isHost(chatRoomId);
        }

        match /messages/{messageId} {
            // LIST, READ: Approved participants and the host can read messages.
            allow list, get: if isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId);

            // CREATE: Approved participants and the host can send messages.
            allow create: if (isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId)) && request.resource.data.userId == request.auth.uid;
            
            // UPDATE: Approved participants and the host can vote on messages.
            allow update: if (isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId));
            
            // DELETE: Host can delete messages.
            allow delete: if isHost(chatRoomId);
        }
      
        match /polls/{pollId} {
            // LIST, READ: Approved participants and host can see polls.
            allow list, get: if isApprovedParticipant(chatRoomId, request.auth.uid) || isHost(chatRoomId);

            // CREATE, UPDATE: Only the host can create or update a poll.
            allow create, update: if isHost(chatRoomId);
          
            // DELETE: Only host can delete.
            allow delete: if isHost(chatRoomId);
        }
    }
  }
}
