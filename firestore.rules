rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(chatRoomId, userId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == userId;
    }

    function isApprovedParticipant(chatRoomId, userId) {
        return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
               get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // Allow reading the main chat room document if it's public, private, or if the user is an approved participant.
      // This is necessary to fetch room details before joining.
      allow get: if request.auth != null && (
        resource.data.isPrivate == true || 
        resource.data.isPrivate == false ||
        isApprovedParticipant(chatRoomId, request.auth.uid)
      );
        
      allow list: if request.auth != null; // Allow listing all public chatrooms.
      allow create: if request.auth != null && request.resource.data.hostId == request.auth.uid;
      allow update: if request.auth != null && isOwner(chatRoomId, request.auth.uid);
      allow delete: if request.auth != null && isOwner(chatRoomId, request.auth.uid);

      match /participants/{userId} {
        allow read, list: if request.auth != null && (isOwner(chatRoomId, request.auth.uid) || resource.data.isPrivate == true || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow create, update: if request.auth != null; // Allow users to join/request, and host to update status.
        allow delete: if request.auth != null && isOwner(chatRoomId, request.auth.uid);
      }

      match /messages/{messageId} {
        allow read, list: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid);
        allow create, update: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid);
        allow delete: if request.auth != null && isOwner(chatRoomId, request.auth.uid);
      }

       match /polls/{pollId} {
        allow read, list: if request.auth != null && (isApprovedParticipant(chatRoomId, request.auth.uid) || isOwner(chatRoomId, request.auth.uid));
        allow create: if request.auth != null && isOwner(chatRoomId, request.auth.uid);
        allow update: if request.auth != null && (isOwner(chatRoomId, request.auth.uid) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow delete: if request.auth != null && isOwner(chatRoomId, request.auth.uid);
      }
    }
  }
}