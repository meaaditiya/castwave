
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isChatRoomHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    function isApprovedParticipant(chatRoomId, userId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
             participantDoc.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.resource.data.hostId == request.auth.uid;
      allow update, delete: if isChatRoomHost(chatRoomId);

      match /participants/{participantId} {
        allow read: if isUserAuthenticated();
        allow create, update: if isUserAuthenticated();
        allow delete: if isChatRoomHost(chatRoomId);
      }

      match /messages/{messageId} {
        allow read, create: if isApprovedParticipant(chatRoomId, request.auth.uid);
        allow update, delete: if isChatRoomHost(chatRoomId);
      }
      
      match /polls/{pollId} {
        allow read, create, update, delete: if isChatRoomHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid);
      }
    }
  }
}
