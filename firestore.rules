rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is the host of a room.
    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    // Helper function to check if a user is an approved participant.
    function isApprovedParticipant(chatRoomId, userId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
             get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // **Read Rules**
      // - Anyone authenticated can list public rooms.
      // - The host can read their own room.
      // - Anyone authenticated can read a specific room's main document (needed for joining).
      allow read: if request.auth != null;

      // **Write Rules**
      // - Any authenticated user can create a new chat room.
      allow create: if request.auth != null;
      // - Only the host can update or delete their chat room.
      allow update, delete: if isHost(chatRoomId);

      // Subcollections
      match /participants/{participantId} {
        // **Read Rules**
        // - The host can read the participants list.
        // - Any authenticated user can read their own participant status.
        allow get: if request.auth != null;
        allow list: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid);

        // **Write Rules**
        // - A user can create their own participant document (to request access).
        allow create: if request.auth.uid == participantId;
        // - Only the host can update a participant's status (approve/deny/remove).
        allow update: if isHost(chatRoomId);
        allow delete: if isHost(chatRoomId);
      }

      match /messages/{messageId} {
        // **Read Rules**
        // - The host or an approved participant can read messages.
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid);
        
        // **Write Rules**
        // - The host or an approved participant can create/update messages (update is for voting).
        allow write: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid);
      }

      match /polls/{pollId} {
        // **Read Rules**
        // - The host or an approved participant can read polls.
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid);

        // **Write Rules**
        // - Only the host can create polls.
        allow create: if isHost(chatRoomId);
        // - The host (to end/manage) or an approved user (to vote) can update.
        allow update: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid);
        // - Only the host can delete polls.
        allow delete: if isHost(chatRoomId);
      }
    }
  }
}