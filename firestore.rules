rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an approved participant
    function isApprovedParticipant(chatRoomId, userId) {
      let participant = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
             (participant.data.status == 'approved' || participant.data.status == 'speaker');
    }
    
    function isHost(chatRoomId) {
        return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }

    match /chatRooms/{chatRoomId} {
      allow list: if request.auth != null;
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.hostId;
      allow delete: if request.auth.uid == resource.data.hostId;

      // =================================================================
      // SUBCOLLECTIONS
      // =================================================================

      // -- PARTICIPANTS --
      match /participants/{userId} {
        allow list, get: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow update: if request.auth != null && (isHost(chatRoomId) || request.auth.uid == userId);
        allow delete: if request.auth != null && isHost(chatRoomId);
      }

      // -- MESSAGES --
      match /messages/{messageId} {
        allow get, list: if request.auth != null && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow create: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid) && request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow delete: if request.auth != null && isHost(chatRoomId);
      }
      
      // -- POLLS --
      match /polls/{pollId} {
        allow get, list: if request.auth != null && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow create: if isHost(chatRoomId);
        allow update: if request.auth != null && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId, request.auth.uid));
        allow delete: if isHost(chatRoomId);
      }

      // -- WEBRTC SIGNALS --
      // This collection is used for WebRTC signaling to set up audio calls.
      match /webrtc_signals/{signalId} {
        // Any authenticated user can create, read, and delete signals.
        // These are temporary and short-lived documents needed to establish a peer-to-peer connection.
        allow read, write, delete: if request.auth != null;
      }
    }
  }
}