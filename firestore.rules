
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the host of a chat room.
    function isHost(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }
    
    // Helper function to check if a user is an approved participant in a chat room.
    function isApprovedParticipant(chatRoomId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      return participantDoc.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // Allow read for public rooms or if the user is the host.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId);
      
      // Allow anyone authenticated to list public rooms or their own rooms.
      allow list: if request.query.get('isPrivate') == false || request.query.get('hostId') == request.auth.uid;

      // Allow creating a room for any authenticated user.
      allow create: if request.auth != null;
      
      // Allow updating a room only for the host.
      allow update: if isHost(chatRoomId);
      
      // Allow deleting a room only for the host.
      allow delete: if isHost(chatRoomId);

      // Sub-collections
      match /messages/{messageId} {
        // Allow reading messages for approved participants and the host.
        allow list, get: if isApprovedParticipant(chatRoomId) || isHost(chatRoomId);
        
        // Allow creating messages for approved participants and the host.
        allow create: if isApprovedParticipant(chatRoomId) || isHost(chatRoomId);
        
        // Allow updating messages (for voting) for approved participants and the host.
        allow update: if isApprovedParticipant(chatRoomId) || isHost(chatRoomId);
        
        // Only the host can delete messages (future-proofing).
        allow delete: if isHost(chatRoomId);
      }
      
      match /participants/{participantId} {
        // Any authenticated user can check if they are in the list.
        allow list: if request.auth != null;
        
        // A user can read their own participant status, or the host can read any.
        allow get: if request.auth.uid == participantId || isHost(chatRoomId);
        
        // A user can add themselves to the list (request to join). The host can update any status.
        allow create, update: if request.auth.uid == participantId || isHost(chatRoomId);
        
        // Only the host can remove a participant.
        allow delete: if isHost(chatRoomId);
      }
      
      match /polls/{pollId} {
        // Allow reading polls for approved participants and the host.
        allow list, get: if isApprovedParticipant(chatRoomId) || isHost(chatRoomId);
        
        // Only the host can create, update or delete polls.
        allow create, update, delete: if isHost(chatRoomId);
      }
    }
  }
}
