rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    function isApprovedParticipant(chatRoomId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid))
             && participantDoc.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // READ:
      // - Allow reading any public room.
      // - For private rooms, allow reading if user is the host or an approved participant.
      // - Allow any authenticated user to read a private room's main document (but not subcollections)
      //   to allow the client to determine if it's private and proceed with joining logic.
      allow get: if isAuthenticated() && (
        resource.data.isPrivate == false ||
        isHost(chatRoomId) ||
        isApprovedParticipant(chatRoomId) ||
        (resource.data.isPrivate == true) // Allows initial fetch for joining
      );
      
      // LIST:
      // Allow authenticated users to list (query) public rooms from the homepage.
      allow list: if isAuthenticated() && query.getRules().rules[0].field == "isPrivate" && query.getRules().rules[0].value == false;


      // CREATE:
      // Any authenticated user can create a room, but they must be the host.
      allow create: if isAuthenticated() && request.resource.data.hostId == request.auth.uid;

      // UPDATE/DELETE:
      // Only the host can update or delete their room.
      allow update, delete: if isAuthenticated() && isHost(chatRoomId);

      // --- SUBCOLLECTIONS ---

      match /participants/{participantId} {
        // READ:
        // - Host can read all participants.
        // - Any user can read their own participant document.
        allow get: if isAuthenticated() && (isHost(chatRoomId) || request.auth.uid == participantId);
        
        // LIST:
        // - Host can list all.
        // - Any approved participant can list all participants.
        allow list: if isAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));

        // CREATE:
        // A user can add themselves as a participant (e.g., to request access).
        allow create: if isAuthenticated() && request.auth.uid == participantId;

        // UPDATE:
        // - Only the host can update a participant's status.
        // - A user can update their own document to request to join again.
        allow update: if isAuthenticated() && (isHost(chatRoomId) || request.auth.uid == participantId);
        
        // DELETE:
        // Only the host can remove a participant.
        allow delete: if isAuthenticated() && isHost(chatRoomId);
      }

      match /messages/{messageId} {
        // READ:
        // - For public rooms, anyone authenticated can read.
        // - For private rooms, only the host or approved participants can read.
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false ||
          isHost(chatRoomId) ||
          isApprovedParticipant(chatRoomId)
        );

        // CREATE/UPDATE:
        // - Host or approved participants can send messages (create) or vote (update).
        allow write: if isAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
      }

      match /polls/{pollId} {
        // READ:
        // Same rules as messages.
        allow read: if isAuthenticated() && (
            get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.isPrivate == false ||
            isHost(chatRoomId) ||
            isApprovedParticipant(chatRoomId)
        );

        // CREATE/UPDATE:
        // - Only the host can create or end a poll.
        // - Approved participants can vote (update).
        allow create, update: if isAuthenticated() && (isHost(chatRoomId) || isApprovedParticipant(chatRoomId));
        
        // DELETE:
        // Only host can delete.
        allow delete: if isAuthenticated() && isHost(chatRoomId);
      }
    }
  }
}
