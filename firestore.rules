
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an approved participant of a chat room
    function isApprovedParticipant(chatRoomId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';
    }

    // Helper function to check if a user is the host of a chat room
    function isHost(chatRoomId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)) &&
             get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    match /chatRooms/{chatRoomId} {
      // READ:
      // - Anyone can read a public chat room.
      // - The host can always read their own room.
      // - An approved participant can read the room.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
      
      // Allow LIST for public rooms and user's own rooms. This is broad and relies on client-side filtering.
      allow list: if request.auth != null;

      // CREATE: Any authenticated user can create a chat room.
      allow create: if request.auth != null;

      // UPDATE:
      // - Only the host can update the main chat room details (e.g., end the room, feature a message).
      allow update: if isHost(chatRoomId);

      // DELETE: Only the host can delete their own chat room.
      allow delete: if isHost(chatRoomId);

      // Sub-collection: Participants
      match /participants/{userId} {
        // READ:
        // - The host can read all participant documents.
        // - A user can read their own participant document.
        allow get: if isHost(chatRoomId) || request.auth.uid == userId;
        allow list: if isHost(chatRoomId);

        // CREATE:
        // - A user can create their own participant document (i.e., request to join).
        allow create: if request.auth.uid == userId;

        // UPDATE:
        // - The host can update any participant's status.
        // - A user can update their own document to re-request entry.
        allow update: if isHost(chatRoomId) || request.auth.uid == userId;
      }

      // Sub-collection: Messages
      match /messages/{messageId} {
        // READ: Host and approved participants can read messages.
        allow get, list: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);

        // CREATE: Approved participants can send messages.
        allow create: if isApprovedParticipant(chatRoomId);
        
        // UPDATE: Only host and approved participants can vote (update vote counts)
        allow update: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
        
        // DELETE: No one can delete messages to preserve chat history.
        allow delete: if false;
      }

      // Sub-collection: Polls
      match /polls/{pollId} {
         // READ: Host and approved participants can read polls.
        allow get, list: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);

        // CREATE & UPDATE: Only the host can create or update a poll.
        allow create, update: if isHost(chatRoomId);
        
        // DELETE: Only the host can delete a poll.
        allow delete: if isHost(chatRoomId);
      }
    }
  }
}
