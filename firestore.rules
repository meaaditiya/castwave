rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an approved participant
    function isApprovedParticipant(chatRoomId, userId) {
      // Check if the participant document exists and has a status of 'approved' or 'speaker'
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
             (participantDoc.data.status == 'approved' || participantDoc.data.status == 'speaker');
    }
    
    function isParticipant(chatRoomId, userId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
    }

    match /chatRooms/{chatRoomId} {
      // LIST: Any authenticated user can list public chat rooms.
      // A user can list rooms they are the host of.
      allow list: if request.auth != null;

      // GET: Any authenticated user can read a chat room's details.
      allow get: if request.auth != null;

      // CREATE: Any authenticated user can create a chat room.
      allow create: if request.auth != null && request.resource.data.hostId == request.auth.uid;

      // UPDATE: Only the host can update room details.
      allow update: if request.auth.uid == resource.data.hostId;

      // DELETE: Only the host can delete their own chat room.
      allow delete: if request.auth.uid == resource.data.hostId;

      // =================================================================
      // SUBCOLLECTIONS
      // =================================================================

      // -- PARTICIPANTS --
      match /participants/{userId} {
        allow read, list: if request.auth != null;
        
        // CREATE: A user can add themselves to the participants list.
        allow create: if request.auth != null && request.auth.uid == userId;

        // UPDATE: The host can update any participant's status.
        allow update: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
        
        // DELETE: Only the host can remove a participant.
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
      }

      // -- MESSAGES --
      match /messages/{messageId} {
        // READ/LIST: Only an approved participant or speaker can read messages.
        allow read, list: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid);

        // CREATE: Only an approved participant or speaker can send a message.
        allow create: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid) && request.resource.data.userId == request.auth.uid;
        
        // UPDATE: An approved participant or speaker can vote.
        allow update: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid);

        // DELETE: Only the host can delete a message.
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
      }
      
      // -- POLLS --
      match /polls/{pollId} {
        // READ/LIST: Any approved participant or speaker can see polls.
        allow read, list: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid);
        
        // CREATE: Only the host can create a poll.
        allow create: if request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
        
        // UPDATE: Host can end poll. Approved users can vote.
        allow update: if request.auth != null && isApprovedParticipant(chatRoomId, request.auth.uid);

        // DELETE: Only the host can delete a poll.
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
      }
      
      // -- WEBRTC SIGNALS --
      // These are temporary messages used to set up peer-to-peer connections.
      match /webrtc_signals/{signalId} {
        // Any authenticated user in the app can create/read/delete signals.
        // This is safe because the signals are short-lived and only contain
        // non-sensitive connection metadata. A user must already be in the
        // app and have the chatRoomId to interact with this.
        allow read, write: if request.auth != null;
      }
    }
  }
}