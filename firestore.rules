
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isHost(chatRoomId) {
      return request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId;
    }
    
    function isApprovedOrHost(chatRoomId, userId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
      return isHost(chatRoomId) || (exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)) &&
             (participantDoc.data.status == 'approved'));
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    match /chatRooms/{chatRoomId} {
      allow list: if request.auth != null &&
                   (request.query.get('isPrivate') == false || request.query.get('hostId') == request.auth.uid);

      allow read: if request.auth != null;

      allow create: if request.auth != null && request.resource.data.hostId == request.auth.uid;

      allow update: if request.auth != null && isHost(chatRoomId);

      allow delete: if request.auth != null && isHost(chatRoomId);

      match /participants/{userId} {
        allow get, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow update: if request.auth != null && (isHost(chatRoomId) || request.auth.uid == userId);
        allow delete: if request.auth != null && isHost(chatRoomId);
      }

      match /messages/{messageId} {
        allow get, list: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
        allow create: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid) && request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
        allow delete: if request.auth != null && isHost(chatRoomId);
      }

      match /polls/{pollId} {
        allow get, list: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
        allow create, delete: if request.auth != null && isHost(chatRoomId);
        allow update: if request.auth != null && isApprovedOrHost(chatRoomId, request.auth.uid);
      }
    }
  }
}
