
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /chatRooms/{chatRoomId} {
      // Allow read for public rooms or for any authenticated user if the room is private
      allow read: if resource.data.isPrivate == false || request.auth != null;
      
      // Allow host to create, update, delete
      allow write: if request.auth != null && request.auth.uid == resource.data.hostId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.hostId;
      
      function isParticipant(userId) {
        return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId));
      }
      
      function isApprovedParticipant(userId) {
        return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(userId)).data.status == 'approved';
      }

      match /messages/{messageId} {
        // Allow read/write only for approved participants
        allow read, write: if request.auth != null && isApprovedParticipant(request.auth.uid);
      }

      match /participants/{participantId} {
        // Allow users to read their own participant document
        // Allow approved participants to read the full list
        allow get: if request.auth != null && (request.auth.uid == participantId || isApprovedParticipant(request.auth.uid));
        allow list: if request.auth != null; // Allow any authenticated user to list participants to check status

        // Allow host to update any participant
        // Allow users to update their own participant document (e.g. for re-requesting access)
        allow write: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId || request.auth.uid == participantId);
        
        // Allow any authenticated user to create their own participant document
        allow create: if request.auth != null && request.auth.uid == participantId;
      }

      match /polls/{pollId} {
        // Allow read for any authenticated user in the room
        allow read: if request.auth != null;
        // Allow writes (voting) only for approved participants
        allow write: if request.auth != null && isApprovedParticipant(request.auth.uid);
      }
    }
  }
}
