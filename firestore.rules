rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is the host of a given chat room.
    function isHost(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }

    // Helper function to check if a user is an approved participant of a chat room.
    function isApprovedParticipant(chatRoomId) {
      let participantDoc = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
      return request.auth.uid != null && participantDoc.data.status == 'approved';
    }

    match /chatRooms/{chatRoomId} {
      // READ: 
      // - Allow reading any public room.
      // - Allow reading a private room if the user is the host.
      // - Allow listing public rooms, and rooms hosted by the current user.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId);
      allow list: if request.query.get('isPrivate') == false || (request.auth.uid != null && request.query.get('hostId') == request.auth.uid);

      // CREATE: A user must be authenticated and must be the host of the room they are creating.
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.hostId;
      
      // UPDATE: Only the host can update the room details (like starting/ending sessions or featuring messages).
      // Any authenticated user can update the 'typingUsers' field.
      allow update: if isHost(chatRoomId) || (request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['typingUsers']));

      // DELETE: Only the host can delete their own chat room.
      allow delete: if isHost(chatRoomId);

      // --- SUBCOLLECTIONS ---

      match /messages/{messageId} {
        // READ: Only approved participants and the host can read messages.
        allow get, list: if isApprovedParticipant(chatRoomId) || isHost(chatRoomId);
        
        // CREATE: Only approved participants can create (send) messages.
        allow create: if isApprovedParticipant(chatRoomId) && request.resource.data.userId == request.auth.uid;

        // UPDATE (Votes): Approved participants can vote, but cannot change their vote.
        allow update: if isApprovedParticipant(chatRoomId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'downvotes', 'voters']) && !resource.data.voters.keys().hasAny([request.auth.uid]);

        // DELETE: Only the host can delete messages.
        allow delete: if isHost(chatRoomId);
      }

      match /participants/{participantId} {
        // READ: The host can read all participant info. Users can read their own status.
        allow get: if isHost(chatRoomId) || request.auth.uid == participantId;
        allow list: if isHost(chatRoomId);

        // CREATE (Join/Request): A user can add themselves as a participant (status 'pending').
        allow create: if request.auth.uid != null && request.auth.uid == participantId;
        
        // UPDATE: The host can update any participant's status. A user can update their own status to 'pending' if they were denied.
        allow update: if isHost(chatRoomId) || 
                       (request.auth.uid == participantId && request.resource.data.status == 'pending');

        // DELETE: Only the host can remove a participant record.
        allow delete: if isHost(chatRoomId);
      }

      match /polls/{pollId} {
        // READ: Approved participants and the host can read polls.
        allow get, list: if isApprovedParticipant(chatRoomId) || isHost(chatRoomId);
        
        // CREATE: Only the host can create polls.
        allow create: if isHost(chatRoomId);
        
        // UPDATE: The host can update the poll (e.g., end it). Approved users can vote.
        allow update: if isHost(chatRoomId) || 
                       (isApprovedParticipant(chatRoomId) && !resource.data.voters.keys().hasAny([request.auth.uid]));

        // DELETE: Only the host can delete polls.
        allow delete: if isHost(chatRoomId);
      }
    }
  }
}
