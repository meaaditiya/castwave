rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isHost(chatRoomId) {
      return isAuth() && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
    }
    
    function isApprovedParticipant(chatRoomId) {
      let participantPath = /databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid);
      return isAuth() && exists(participantPath) && get(participantPath).data.status == 'approved';
    }

    // --- Main Rules ---
    match /chatRooms/{chatRoomId} {
      // READ Rules
      // GET: Allow reading a single document if it's public, or if the user is the host.
      allow get: if resource.data.isPrivate == false || isHost(chatRoomId);
      
      // LIST: Allow querying rooms if it's for public rooms or for the user's own rooms.
      // This is the key fix for the main page loading error.
      allow list: if (request.query.where.isPrivate == false || request.query.where.isPrivate != true)
                   || (isAuth() && request.query.where.hostId == request.auth.uid);
      
      // WRITE Rules
      // CREATE: Any authenticated user can create a chat room, but they must set themselves as the host.
      allow create: if isAuth() && request.resource.data.hostId == request.auth.uid;

      // UPDATE: Only the host can update general details.
      // Any authenticated user can update the 'typingUsers' field to show they are typing.
      allow update: if isHost(chatRoomId)
                    || (isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['typingUsers']));
                    
      // DELETE: Only the host can delete their own chat room. The rules for subcollections below will allow the delete to cascade.
      allow delete: if isHost(chatRoomId);
      
      // --- SUBCOLLECTION Rules ---
      match /participants/{userId} {
        allow read: if isHost(chatRoomId) || (isAuth() && request.auth.uid == userId);
        allow create: if isAuth() && request.auth.uid == userId; // Users can add themselves to request joining
        allow update: if isHost(chatRoomId) || (isAuth() && request.auth.uid == userId); // Host can change status, user can update their own request.
        allow delete: if isHost(chatRoomId); // Host can remove/kick a participant
      }
      
      match /messages/{messageId} {
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
        allow create: if (isHost(chatRoomId) || isApprovedParticipant(chatRoomId)) && request.resource.data.userId == request.auth.uid;
        // Allow updating only for votes, and only if the user hasn't voted on this message before.
        allow update: if (isHost(chatRoomId) || isApprovedParticipant(chatRoomId)) && resource.data.voters[request.auth.uid] == null;
        allow delete: if isHost(chatRoomId); // Host can delete any message.
      }
      
      match /polls/{pollId} {
        allow read: if isHost(chatRoomId) || isApprovedParticipant(chatRoomId);
        allow create, delete: if isHost(chatRoomId);
        // Allow updating only for votes (if not already voted) or if the user is the host.
        allow update: if isHost(chatRoomId) || (isApprovedParticipant(chatRoomId) && resource.data.voters[request.auth.uid] == null);
      }
    }
  }
}

    