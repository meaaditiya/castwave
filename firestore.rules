
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can only read and update their own profile
    match /users/{userId} {
      allow read;
      allow update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      
      // Allow any authenticated user to read followers/following lists
      match /followers/{followerId} {
        allow read, write: if isAuthenticated();
      }
      match /following/{followingId} {
      	allow read, write: if isAuthenticated();
      }
    }

    match /chatRooms/{roomId} {
      // Allow read access for public rooms, or if the user is a participant for private rooms
      allow read: if resource.data.isPrivate == false || (isAuthenticated() && exists(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)));
      
      // Allow create access for any authenticated user
      allow create: if isAuthenticated();
      
      // Allow update access only for the host
      allow update: if isAuthenticated() && isOwner(resource.data.hostId);

      // Allow delete access only for the host
      allow delete: if isAuthenticated() && isOwner(resource.data.hostId);

      // Rules for messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/chatRooms/$(roomId)).data.isPrivate == false || exists(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid));
        
        // Allow creating messages if the user is an approved participant
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
        
        // Allow deleting messages only for the user who sent it
        allow delete: if isAuthenticated() && isOwner(resource.data.userId);

        // Allow updating (for votes) if user is approved participant
        allow update: if isAuthenticated() && get(/databases/$(database)/documents/chatRooms/$(roomId)/participants/$(request.auth.uid)).data.status == 'approved';
      }

      // Rules for participants subcollection
      match /participants/{participantId} {
        allow read: if isAuthenticated();
        // Allow user to add themselves (request to join) or if host is updating status
        allow write: if isAuthenticated() && (isOwner(participantId) || isOwner(get(/databases/$(database)/documents/chatRooms/$(roomId)).data.hostId));
      }
      
      // Allow RTC signaling for any authenticated user within a chat room.
      // This is necessary for the WebRTC audio chat to function.
      match /rtc/{path=**} {
        allow read, write: if isAuthenticated();
      }
    }
  }
}
