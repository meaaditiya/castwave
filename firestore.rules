
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users:
    // 1. Allow anyone to create their own user document (signup).
    // 2. Allow authenticated users to read their own profile.
    // 3. Allow authenticated users to update their own profile (e.g., username, photoURL).
    // 4. Allow anyone to read public profiles (for profile pages).
    // 5. Allow anyone to query for usernames to check for uniqueness.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // More open for simplicity of profile viewing
      allow update: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null;
    }

    // ChatRooms:
    // 1. Allow authenticated users to create chat rooms.
    // 2. Allow anyone to read public chat rooms (isPrivate == false).
    // 3. Allow authenticated users to read private chat rooms they created or are a participant in.
    // 4. Allow the host to update or delete their own chat room.
    match /chatRooms/{chatRoomId} {
      allow create: if request.auth != null;
      allow read: if resource.data.isPrivate == false || (request.auth != null && (resource.data.hostId == request.auth.uid || exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid))));
      allow update: if request.auth != null && resource.data.hostId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.hostId == request.auth.uid;

      // Participants Subcollection:
      // 1. Allow users to add themselves to a room (request to join).
      // 2. Allow the host to add/update participants (approve/deny/remove).
      // 3. Allow authenticated participants of the room to read the participant list.
      match /participants/{participantId} {
        allow read: if request.auth != null && exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid));
        allow create: if request.auth != null && request.auth.uid == participantId; // User can add themselves
        allow update: if request.auth != null && (
            (get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid) || // Host can update
            (request.auth.uid == participantId) // User can update their own status (e.g., for re-requesting)
        );
      }

      // Messages Subcollection:
      // 1. Allow approved participants to read and write messages.
      // 2. Allow anyone to read featured messages (as they are part of the main document).
      // 3. No one can delete messages through the client.
      match /messages/{messageId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';
      }

      // Polls Subcollection
      // 1. Only the host can create, update, or delete polls.
      // 2. Approved participants can read the poll and vote.
      match /polls/{pollId} {
          allow read: if request.auth != null && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)/participants/$(request.auth.uid)).data.status == 'approved';
          allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.hostId == request.auth.uid;
      }
    }
  }
}
